
import React from 'react';

export const Header: React.FC = () => {
  return (
    <header className="w-full p-4 flex justify-center items-center bg-gray-900/50 backdrop-blur-sm border-b border-gray-800">
        <div className="flex items-center space-x-3">
            <div className="w-12 h-12 bg-indigo-600 rounded-full flex items-center justify-center">
                 <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19V6l12-3v13M9 19c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zm12-3c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zM9 6l12-3" /></svg>
            </div>
            <h1 className="text-3xl font-bold text-white tracking-wider">
                Auto DJ <span className="text-indigo-400">Remix AI</span>
            </h1>
        </div>
    </header>
  );
};
import React from 'react';

export const Footer: React.FC = () => {
    return (
        <footer className="w-full p-4 text-center text-gray-500 text-sm">
            <p>Powered by Gemini. Designed for creativity.</p>
        </footer>
    );
};
import React, { useCallback, useState } from 'react';

interface FileUploadProps {
  onFileChange: (file: File | null) => void;
  file: File | null;
}

const FileUpload: React.FC<FileUploadProps> = ({ onFileChange, file }) => {
  const [isDragging, setIsDragging] = useState(false);

  const handleDragEnter = (e: React.DragEvent<HTMLLabelElement>) => {
    e.preventDefault();
    e.stopPropagation();
    setIsDragging(true);
  };

  const handleDragLeave = (e: React.DragEvent<HTMLLabelElement>) => {
    e.preventDefault();
    e.stopPropagation();
    setIsDragging(false);
  };

  const handleDragOver = (e: React.DragEvent<HTMLLabelElement>) => {
    e.preventDefault();
    e.stopPropagation();
  };

  const handleDrop = useCallback((e: React.DragEvent<HTMLLabelElement>) => {
    e.preventDefault();
    e.stopPropagation();
    setIsDragging(false);
    if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {
      onFileChange(e.dataTransfer.files[0]);
    }
  }, [onFileChange]);

  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files.length > 0) {
      onFileChange(e.target.files[0]);
    }
  };

  return (
    <div className="flex items-center justify-center w-full">
      <label
        onDragEnter={handleDragEnter}
        onDragLeave={handleDragLeave}
        onDragOver={handleDragOver}
        onDrop={handleDrop}
        htmlFor="dropzone-file"
        className={`flex flex-col items-center justify-center w-full h-48 border-2 border-dashed rounded-lg cursor-pointer transition-colors duration-300 ${isDragging ? 'border-indigo-400 bg-gray-700' : 'border-gray-600 bg-gray-700/50 hover:bg-gray-700'}`}
      >
        <div className="flex flex-col items-center justify-center pt-5 pb-6 text-center">
            {file ? (
                <>
                    <svg xmlns="http://www.w3.org/2000/svg" className="w-10 h-10 mb-3 text-green-400" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>
                    <p className="mb-2 text-sm text-gray-300"><span className="font-semibold">File select ho gayi:</span></p>
                    <p className="text-xs text-indigo-400">{file.name}</p>
                </>
            ) : (
                <>
                    <svg xmlns="http://www.w3.org/2000/svg" className="w-10 h-10 mb-3 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" /></svg>
                    <p className="mb-2 text-sm text-gray-400"><span className="font-semibold">Upload karne ke liye click karein</span> ya drag karke drop karein</p>
                    <p className="text-xs text-gray-500">MP3, WAV, FLAC (50MB tak)</p>
                </>
            )}
        </div>
        <input id="dropzone-file" type="file" className="hidden" accept="audio/*" onChange={handleFileSelect} />
      </label>
    </div>
  );
};

export default FileUpload;
import React from 'react';
import { REMIX_STYLES } from '../constants';
import { RemixStyle } from '../types';

interface GenreSelectorProps {
  selectedGenre: RemixStyle;
  onGenreChange: (genre: RemixStyle) => void;
}

const GenreSelector: React.FC<GenreSelectorProps> = ({ selectedGenre, onGenreChange }) => {
  return (
    <div>
      <select
        id="genre"
        value={selectedGenre}
        onChange={(e) => onGenreChange(e.target.value as RemixStyle)}
        className="w-full bg-gray-700 border border-gray-600 text-white text-md rounded-lg focus:ring-indigo-500 focus:border-indigo-500 block p-4"
      >
        {REMIX_STYLES.map((style) => (
          <option key={style.value} value={style.value}>
            {style.label}
          </option>
        ))}
      </select>
    </div>
  );
};

export default GenreSelector;
import React from 'react';

const Loader: React.FC = () => {
  return (
    <div className="flex flex-col items-center justify-center p-16 space-y-6 bg-gray-800">
      <div className="relative flex items-center justify-center w-24 h-24">
        <div className="absolute w-full h-full rounded-full border-4 border-indigo-500/30"></div>
        <div className="absolute w-full h-full rounded-full border-t-4 border-indigo-500 animate-spin"></div>
        <svg xmlns="http://www.w3.org/2000/svg" className="h-10 w-10 text-indigo-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M9 19V6l12-3v13M9 19c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zm12-3c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zM9 6l12-3" />
        </svg>
      </div>
      <h2 className="text-xl font-semibold text-indigo-300 animate-pulse">Aapka DJ Remix Taiyar Ho Raha Hai...</h2>
      <p className="text-gray-400 text-center max-w-sm">AI producer bass check kar raha hai aur dhol set kar raha hai. Aapka master track bas kuch hi pal door hai!</p>
    </div>
  );
};

export default Loader;
import React from 'react';

interface RemixResultProps {
  description: string;
  audioSrc: string;
  genre: string;
  fileName: string;
  onReset: () => void;
}

// A simple markdown-to-html converter
const MarkdownRenderer: React.FC<{ content: string }> = ({ content }) => {
  const htmlContent = content
    .replace(/^# (.*$)/gim, '<h1 class="text-3xl font-bold text-indigo-400 mb-4">$1</h1>')
    .replace(/\* (.*$)/gim, '<li class="flex items-start"><svg class="w-5 h-5 mr-2 text-indigo-400 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg><span>$1</span></li>')
    .replace(/<\/li>(\s*)<li/gim, '</li><li') // remove space between li
    .replace(/(^(\s*<li.*<\/li>)+)/gim, '<ul class="space-y-3 text-gray-300">$1</ul>')
    .replace(/\n/g, '<br />');

  return <div className="prose prose-invert max-w-none" dangerouslySetInnerHTML={{ __html: htmlContent }} />;
};


const RemixResult: React.FC<RemixResultProps> = ({ description, audioSrc, genre, fileName, onReset }) => {
  const handleDownload = () => {
    const fileExtension = fileName.split('.').pop() || 'mp3';
    const baseName = fileName.split('.').slice(0, -1).join('.');
    const remixedFileName = `${baseName}_${genre.replace(/\s+/g, '_')}_Remix.${fileExtension}`;

    const link = document.createElement('a');
    link.href = audioSrc;
    link.download = remixedFileName;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  return (
    <div className="p-8">
      <div className="text-center mb-6">
        <h2 className="text-3xl font-bold text-white">Aapka Remix Taiyar Hai!</h2>
        <p className="text-indigo-400 font-medium">{`"${fileName}" - ${genre} Version`}</p>
      </div>
      
      <div className="mb-6">
        <audio controls src={audioSrc} className="w-full" controlsList="nodownload">
          Your browser does not support the audio element.
        </audio>
      </div>

      <div className="bg-gray-900/50 p-6 rounded-lg max-h-80 overflow-y-auto border border-gray-700">
        <MarkdownRenderer content={description} />
      </div>

      <div className="mt-8 flex flex-col sm:flex-row justify-center items-center gap-4">
        <button
          onClick={handleDownload}
          className="w-full sm:w-auto bg-green-600 hover:bg-green-500 text-white font-bold py-3 px-6 rounded-lg transition-all duration-300 transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-green-500/50 flex items-center justify-center space-x-2"
        >
          <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" /></svg>
          <span>Remix Download Karo</span>
        </button>
        <button
          onClick={onReset}
          className="w-full sm:w-auto bg-indigo-600 hover:bg-indigo-500 text-white font-bold py-3 px-6 rounded-lg transition-all duration-300 transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-indigo-500/50 flex items-center justify-center space-x-2"
        >
          <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h5M20 20v-5h-5M4 4l16 16" /></svg>
          <span>Dusra Remix Banao</span>
        </button>
      </div>
    </div>
  );
};

export default RemixResult;
